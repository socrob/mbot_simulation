<?xml version="1.0" encoding="utf-8"?>


<launch>

  <!-- Launching Gazebo -->

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <env name="GAZEBO_MODEL_PATH" value="$(find mbot_simulation)/models"/>
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <!--arg name="world_name" value="$(find mbot_simulation)/worlds/gazebo_ISR_testbed.world"/-->
      <!--arg name="world_name" value="$(find mbot_simulation)/worlds/gazebo_rockin.world"/-->
      <arg name="debug" value="$(arg debug)" />
      <arg name="gui" value="$(arg gui)" />
      <arg name="paused" value="$(arg paused)"/>
      <arg name="use_sim_time" value="$(arg use_sim_time)"/>
      <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find mbot_description)/urdf/mbot_socrob.urdf.xacro'"/>

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model mbot_socrob -param robot_description"/>

    <!-- TF hacker for the gazebo TFs -->
    <!-- node pkg="tf" type="static_transform_publisher" name="tf_create_base_link1" args="0 0 0 0 0 0 /base_footprint /base_link 33.33"/-->
    <node pkg="tf" type="static_transform_publisher" name="tf_create_base_link2" args="0 0 0 0 0 0 /base_link /mbot_base_link 33.33"/>

    <!-- Load head joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find mbot_simulation)/config/mbot_gazebo.yaml" command="load"/>

    <!-- Load the gazebo ros control stuff -->
    <node name="robot_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/mbot_gazebo" args="joint_state_controller head_angle_controller back_wheel_controller left_wheel_controller right_wheel_controller"/>

    <!-- Load omni base driver (cmd_vel and tf) -->
    <node name="virtual_omni_driver" pkg="mbot_simulation" type="virtual_omni_driver.py" output="screen" />

    <!--node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
      <param name="publish_frequency" type="double" value="25.0"/>
    </node-->



    <!-- node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/ -->

    <!-- rosparam file="$(find mbot_description)/../config/simulation_omni.yaml" command="load"/>
    <node name="motor_controllers" pkg="omni_odometry" type="motion_node"/>

    <node name="control_translator" pkg="mbot_simulation" type="control_translator"/ -->

</launch>
