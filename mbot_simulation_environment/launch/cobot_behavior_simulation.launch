<?xml version="1.0" encoding="utf-8"?>


<launch>

  <!-- Launching Gazebo -->

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="false"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find mbot_simulation)/worlds/gazebo_ISR_testbed.world"/>
      <arg name="debug" value="$(arg debug)" />
      <arg name="gui" value="$(arg gui)" />
      <arg name="paused" value="$(arg paused)"/>
      <arg name="use_sim_time" value="$(arg use_sim_time)"/>
      <arg name="headless" value="$(arg headless)"/>

      <!--remap from="/cmd_vel" to="/vel"/-->
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find cobot_description)/urdf/scout.urdf.xacro'" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model scout -param robot_description"/>

    <!-- TF hacker for the gazebo TFs -->
    <node pkg="tf" type="static_transform_publisher" name="tf_create_base_link1" args="0 0 0 0 0 0 /base_footprint /base_link 33.33"/>
    <node pkg="tf" type="static_transform_publisher" name="tf_create_base_link2" args="0 0 0 0 0 0 /base_link /scout_base_link 33.33"/> 

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
      <param name="publish_frequency" type="double" value="30.0"/>
    </node>
  
  



  
  <!-- Launching amcl, joy and the drivers -->

    <arg name="use_move_base" default="false"/>
  
    <arg name="map" default="$(find mbot_simulation)/maps/at_home_testbed.yaml"/>
    
    <node name="map_server" pkg="map_server" type="map_server" args=" $(arg map)" required="true">
      <param name="frame_id" value="/map" />
    </node>

    <include file="$(find maps)/../launch/mbot/amcl_simulation.launch"/>
 
    <!-- Navigation -->
    <param name="map" value="$(arg map)"/>
    <rosparam file="$(find maps)/../config/scout.yaml" command="load"/>

    <group unless="$(arg use_move_base)">
      <node name="navigation" pkg="scout_navigation" type="navigator">
        <param name="guidance_method" type="string" value="fmm"/>
	<remap from="/scan" to="/rrbot/laser/scan"/>
      </node>

      <node name="scout_move_base_interface_simulation" pkg="scout_driver" type="scout_move_base_interface_simulation"/>
    </group>
    <group if="$(arg use_move_base)">
      <!--node name="scout_move_base_interface" pkg="scout_driver" type="scout_move_base_interface"/-->
      <node name="scout_move_base_interface_simulation" pkg="scout_driver" type="scout_move_base_interface_simulation">
	<remap from="/cmd_vel" to="/vel"/>
      </node>

      <include file="$(find maps)/../launch/move_base_sim.launch"/>

      <node name="navigation" pkg="scout_navigation" type="navigator" output="screen">
        <param name="guidance_method" type="string" value="move_base"/>
	<param name="laser_frame" value="/hokuyo_link"/>
      </node>
    </group>

    <!--node name="behaviors" pkg="mbot_simulation" type="behaviors_test.py"/-->

    <node name="webconsole" pkg="webconsole" type="server"/>

</launch>
