<?xml version="1.0"?>
<launch>

  <!-- ROS control based spawners to control the mbot robot base and arm -->

  <!-- get from env the ROBOT varibale -->
  <arg name="robot" default="$(optenv ROBOT !!ROBOT env NOT SET!!)" />

  <!-- identify from ROBOT env if arm is required -->
  <arg name="arm_required" value="$(eval robot!='mbot05')"/>

  <!-- select arm controller, WARNING: Only one at a time can be enabled ! -->
  <arg name="arm_position_ctrl_required" default="false" />
  <arg name="arm_velocity_ctrl_required" default="false" />
  <arg name="arm_trajectory_ctrl_required" default="true" />

  <!-- the location of the control parameters -->
  <arg name="ctrl_config_base_path" default="$(find mbot_gazebo_control)/ros/config" />

  <!-- load base, neck, head cam and joint state parameters to param server -->
  <rosparam file="$(arg ctrl_config_base_path)/mbot_base_velocity_control.yaml" command="load" />
  <rosparam file="$(arg ctrl_config_base_path)/mbot_head_position_control.yaml" command="load" />
  <rosparam file="$(arg ctrl_config_base_path)/mbot_joint_state_control.yaml" command="load" />

  <!-- spawn base, neck, head cam and joint state controllers -->
  <node pkg="controller_manager" type="spawner" name="mbot_basic_ctrl_spawner"
        output="screen" args="mbot_base_velocity_controller
                              mbot_head_position_controller
                              mbot_head_camera_position_controller
                              mbot_joint_state_controller" />

  <!-- arm is required -->
  <group if="$(arg arm_required)">

    <!-- load gripper controller -->
    <rosparam file="$(arg ctrl_config_base_path)/mbot_gripper_position_control.yaml" command="load" />
    <node pkg="controller_manager" type="spawner" name="mbot_gripper_ctrl_spawner"
          output="screen" args="left_arm_gripper_joint_position_controller" />

    <!-- load params even if ctrl is not set, to enable switching controllers during runtime -->
    <rosparam file="$(arg ctrl_config_base_path)/mbot_arm_position_control.yaml" command="load" />
    <rosparam file="$(arg ctrl_config_base_path)/mbot_arm_velocity_control.yaml" command="load" />
    <rosparam file="$(arg ctrl_config_base_path)/mbot_arm_trajectory_control.yaml" command="load" />

    <group if="$(arg arm_position_ctrl_required)">

      <!-- spawn left arm position controller -->
      <node pkg="controller_manager" type="spawner" name="mbot_pos_arm_ctrl_spawner"
            output="screen" args="left_arm_joint0_position_controller
                                left_arm_joint1_position_controller
                                left_arm_joint2_position_controller
                                left_arm_joint3_position_controller
                                left_arm_joint4_position_controller
                                left_arm_joint5_position_controller
                                left_arm_joint6_position_controller" />
    </group>

    <group if="$(arg arm_velocity_ctrl_required)">
      <!-- spawn left arm velocity controller -->
      <node pkg="controller_manager" type="spawner" name="mbot_vel_arm_ctrl_spawner"
            output="screen" args="left_arm_joint0_velocity_controller
                                left_arm_joint1_velocity_controller
                                left_arm_joint2_velocity_controller
                                left_arm_joint3_velocity_controller
                                left_arm_joint4_velocity_controller
                                left_arm_joint5_velocity_controller
                                left_arm_joint6_velocity_controller" />
    </group>

    <group if="$(arg arm_trajectory_ctrl_required)">
      <!-- spawn left arm trajectory controller -->
      <node pkg="controller_manager" type="spawner" name="mbot_traj_arm_ctrl_spawner"
            output="screen" args="left_arm_traj_controller" />
    </group>

  </group>

  <!-- relay the commanded velocity of the robot to be listened by the odom publisher -->
  <node pkg="topic_tools" type="relay" name="cmd_vel_relay"
        args="cmd_vel mbot_velocity_controller/cmd_vel" />

  <!-- 1. subscribe to cmd_head std_msgs/UInt8MultiArray (with position/velocity info)
          and republish to gazebo command topic on the form std_msgs/Float64 (position only)
       2. subscribe to std_msgs/UInt16 which is the datatype of the real robot tilt mechanism
          and republish to gazebo in the form std_msgs/Float64 -->
  <node pkg="mbot_gazebo_control" type="mbot_head_republisher" name="mbot_head_republisher_node" output="screen" />

</launch>
