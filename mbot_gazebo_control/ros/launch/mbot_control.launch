<?xml version="1.0"?>
<launch>

  <!-- Control all sim mbot joints: base, head and arm using ROS control.
       NOTE: position, velocity and trajectory controllers for the arm are available
       however we load and start by default the trajectory controller -->

  <!-- get from env the ROBOT varibale -->
  <arg name="robot" default="$(optenv ROBOT !!ROBOT env NOT SET!!)" />


  <!-- identify from ROBOT env if arm is required -->
  <arg name="cyton_required" default="$(eval 'with-cyton' in robot)"/>
  <arg name="kinova_required" default="$(eval 'with-kinova' in robot)"/>

  <!-- the location of the control parameters -->
  <arg name="ctrl_config_base_path" default="$(find mbot_gazebo_control)/ros/config" />

  <!-- load base, neck, head cam and joint state parameters to param server -->
  <rosparam file="$(arg ctrl_config_base_path)/head_position_control.yaml" command="load" />
  <rosparam file="$(arg ctrl_config_base_path)/joint_state_control.yaml" command="load" />

  <!-- spawn base, neck, head cam and joint state controllers -->
  <node pkg="controller_manager" type="spawner" name="basic_ctrl_spawner"
        output="screen" args="head_position_controller
                              head_camera_position_controller
                              joint_state_controller" />


    <!-- Group if cyton arm is the one used-->
  <group if="$(arg cyton_required)">
    <!-- load gripper controller (position control, 1 joint) -->
    <rosparam file="$(arg ctrl_config_base_path)/gripper_position_control.yaml" command="load" />
    <node pkg="controller_manager" type="spawner" name="gripper_ctrl_spawner"
          output="screen" args="left_arm_gripper_joint_position_controller" />

    <!-- upload left arm position controller params to param server -->
    <rosparam file="$(arg ctrl_config_base_path)/arm_position_control.yaml" command="load" />
    <!-- load (but do not start) left arm position controller -->
    <node pkg="controller_manager" type="spawner" name="pos_arm_ctrl_spawner"
          output="screen" args="--stopped left_arm_joint0_position_controller
                              left_arm_joint1_position_controller
                              left_arm_joint2_position_controller
                              left_arm_joint3_position_controller
                              left_arm_joint4_position_controller
                              left_arm_joint5_position_controller
                              left_arm_joint6_position_controller" />

    <!-- upload left arm velocity controller params to param server -->
    <rosparam file="$(arg ctrl_config_base_path)/arm_velocity_control.yaml" command="load" />
    <!-- load (but do not start) left arm velocity controller -->
    <node pkg="controller_manager" type="spawner" name="vel_arm_ctrl_spawner"
          output="screen" args="--stopped left_arm_joint0_velocity_controller
                              left_arm_joint1_velocity_controller
                              left_arm_joint2_velocity_controller
                              left_arm_joint3_velocity_controller
                              left_arm_joint4_velocity_controller
                              left_arm_joint5_velocity_controller
                              left_arm_joint6_velocity_controller" />

    <!-- upload left arm trajectory controller params to param server -->
    <rosparam file="$(arg ctrl_config_base_path)/arm_trajectory_control.yaml" command="load" />
    <!-- load and start left arm trajectory controller -->
    <node pkg="controller_manager" type="spawner" name="traj_arm_ctrl_spawner"
          output="screen" args="sim_left_arm_traj_controller" />
  </group>

  <!-- ros_control launch file for kinova-->
  <include file="$(find kinova_control)/launch/kinova_control.launch" if="$(arg kinova_required)">
    <arg name="kinova_robotName" value="j2s6s300"/>
    <arg name="kinova_robotType" value="j2s6s300"/>
    <arg name="use_trajectory_controller" value="true"/>
    <arg name="is7dof" value="false"/>
  </include>

  <!-- 1. subscribe to cmd_head std_msgs/UInt8MultiArray (with position/velocity info)
          and republish to gazebo command topic on the form std_msgs/Float64 (position only) -->
  <node pkg="mbot_gazebo_control" type="mbot_head_republisher" name="mbot_head_republisher_node" output="screen" />

  <!-- node to automatically switch between controllers (position, velocity, trajectory) based on what is needed -->
  <node pkg="mbot_gazebo_control" type="automated_switch_ctrl" name="automated_switch_ctrl_node" output="screen" />

</launch>
